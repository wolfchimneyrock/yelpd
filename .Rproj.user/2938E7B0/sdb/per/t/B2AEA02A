{
    "contents" : "library(\"ggmap\")\n\nplot.histogram <- function(l,binwidth=7)\n{\n  return(\n    ggplot(data=l, aes(fill=state)) +\n    \n    geom_histogram(aes(x=date,y=..count../sum(..count..)),binwidth=binwidth,alpha=.75,position=\"identity\") +\n    #geom_histogram(aes(x=date,y=..density..),binwidth=1,alpha=.25,position=\"identity\") +\n    geom_density(aes(x=date,y=..density..,alpha=.25,position=\"identity\")) +\n    scale_y_continuous('count / total count')\n  )\n}\nplot.map <- function(l,deviance=0.01) \n  {\n  lats=l$lat\n  longs=l$long\n\n  boundary=bounding.box(longs,lats,deviance)\n  #td = as.timeDate(l$date)\n  l$colors[wday(l$date) %in% c(2:6)]='Weekday'\n  l$colors[wday(l$date) %in% c(1,7)]='Weekend'\n#  l$colors[isHoliday(l$date)==TRUE]='Holiday'\n  #print(l$colors)\n  #data = cbind(l,colors)\n  map=get_map(location=boundary,maptype=\"toner-lite\",source=\"stamen\",color=\"bw\")\n  #background=ggmap(map,extent=\"panel\",maprange=TRUE)  \n  return(\n    ggmap(map,extent=\"panel\",maprange=FALSE) +\n    stat_density2d(data=l,\n                 mapping=aes(x=long,y=lat,colour=colors, alpha=..level..),\n                 size=1,\n                 geom=\"density2d\",\n                 contour=TRUE) +  \n    #scale_fill_manual(values=c(\"Weekday\"=\"red\", \"Weekend\"=\"green\")) +\n    geom_point(data=l,aes(x=long,y=lat,color=factor(colors))) +\n    theme_minimal()\n    #ggplot(data=l,aes(x=long,y=lat,color=date))\n  )\n}\n\nbounding.box <- function(long,lat, deviance=0.01,na.rm = TRUE, ...) {\n  qnt.long <- quantile(long, probs=c(deviance, 1-deviance), na.rm = na.rm, ...)\n  qnt.lat <-  quantile(lat,probs=c(deviance,1-deviance),na.rm= na.rm, ...)\n  return(c(c(min(qnt.long),min(qnt.lat)),c(max(qnt.long),max(qnt.lat))))\n}\n\n# Multiple plot function\n#\n# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)\n# - cols:   Number of columns in layout\n# - layout: A matrix specifying the layout. If present, 'cols' is ignored.\n#\n# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),\n# then plot 1 will go in the upper left, 2 will go in the upper right, and\n# 3 will go all the way across the bottom.\n#\nmultiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {\n  library(grid)\n  \n  # Make a list from the ... arguments and plotlist\n  plots <- c(list(...), plotlist)\n  \n  numPlots = length(plots)\n  \n  # If layout is NULL, then use 'cols' to determine layout\n  if (is.null(layout)) {\n    # Make the panel\n    # ncol: Number of columns of plots\n    # nrow: Number of rows needed, calculated from # of cols\n    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),\n                     ncol = cols, nrow = ceiling(numPlots/cols))\n  }\n  \n  if (numPlots==1) {\n    print(plots[[1]])\n    \n  } else {\n    # Set up the page\n    grid.newpage()\n    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))\n    \n    # Make each plot, in the correct location\n    for (i in 1:numPlots) {\n      # Get the i,j matrix positions of the regions that contain this subplot\n      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))\n      \n      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,\n                                      layout.pos.col = matchidx$col))\n    }\n  }\n}\n\nplot.both <- function(l,deviance=0.01) {\n  multiplot(plot.map(l,deviance),plot.histogram(l))\n}",
    "created" : 1431042176318.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1091623545",
    "id" : "B2AEA02A",
    "lastKnownWriteTime" : 1431141070,
    "path" : "~/yelp/plotData.R",
    "project_path" : "plotData.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}