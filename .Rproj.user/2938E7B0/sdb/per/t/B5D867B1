{
    "contents" : "library(\"rmongodb\")\nlibrary(\"lubridate\")\ngenerate.user.history <- function(history, count=1)\n{\n  hist = mongo.bson.to.list(history)\n  iter = mongo.bson.iterator.create(history)\n  loc = vector()\n  mat = matrix(nrow=0,ncol=2)\n  i = 0\n  while ((1<count)&&(mongo.bson.iterator.next(iter))) {\n    val = mongo.bson.iterator.value(iter)\n    date = mongo.bson.value(val,\"date\")\n    loc = mongo.bson.value(val,\"loc.coordinate\")\n    rownames(loc) <- date\n    mat = rbind(mat,loc)\n    i = i + 1\n  }\n  return(mat)\n}\nlookup.top.users.location.history <- function(skip=0,nrows=10,db = mongo, ns = \"yelp.userLocation\")\n{ \n  query <- '{}'\n  fields <- '{}'\n  sort <- '{\"count\":-1}'\n#  history = mongo.bson.empty()\n  cursor = mongo.find(db,ns,query=query,sort=sort,fields=fields,skip=skip,limit=nrows)\n#  rmat = matrix(nrow=0,ncol=10)\n#  coord = vector()\n  ## iterate over the cursor\n  lat = vector()\n  long = vector()\n  l = data.frame()\n  locs = data.frame()\n  while ((mongo.cursor.next(cursor))) {\n    value = mongo.cursor.value(cursor)\n    count = mongo.bson.value(value,\"count\")\n    user_id = rep(mongo.bson.value(value,\"_id\"),count)\n    date=as.character(mongo.bson.value(value,\"dates\"))\n    #date = as.Date(as.POSIXct(mongo.bson.value(value,\"dates\")))\n    #d = mongo.bson.value(value,\"dates\")\n    #date=as.Date(as.POSIXct(d, origin=\"1970-01-01\"))\n    #names(dimnames) = c('date','lat','long')\n    lat = mongo.bson.value(value,\"lat\")\n    long = mongo.bson.value(value,\"long\")\n    state = mongo.bson.value(value,\"state\")\n    #print(dim(lats))\n    #print(dim(longs))\n    locs = cbind(user_id,date,lat,long,state)\n    #rownames(locs) = rep(user_id,count)\n    \n    print(dim(locs))\n    #locations = as.matrix(locs,nrow=count,ncol=2,dimnames=dimnames)\n    l=rbind(l,locs)\n  }\n  l$lat=as.numeric(as.character(l$lat))\n  l$long=as.numeric(as.character(l$long))\n  l$date=as.Date(as.POSIXct(l$date,origin=\"1970-01-01\"))\n  return (l)\n  \n}\nlookup.review.dates <- function(skip=0,limit=0,db=mongo, ns=\"yelp.review\") {\n  query = sprintf('{}')\n  fields = '{\"_id\":0,\"date\":1}'\n  sort = '{\"date\":1}'\n  return(mongo.find.all(db,ns,query=query,skip=skip,limit=limit,fields=fields,sort=sort,data.frame=FALSE))\n}\n\nlookup.user.info <- function(user_id,db = mongo, ns = \"yelp.user\")\n{\n  query = sprintf('{\"user_id\":\"%s\"}',user_id)\n  fields='{\"yelping_since\":1,\"votes\":1,\"review_count\":1,\"fans\":1,\"average_stars\":1,\"compliments\":1,\"elite\":1}'\n  tmp = mongo.find.one(db,ns,query = query, fields=fields)\n  return(unlist(mongo.bson.to.list(tmp),recursive=FALSE))\n}\nlookup.business.stars <- function(business_id,db = mongo, ns = \"yelp.business\")\n{\n  query = sprintf('{\"business_id\":\"%s\"}',business_id)\n  tmp = mongo.find.one(db,ns,query = query, fields='{\"stars\":1}')\n  return(as.numeric(mongo.bson.value(tmp,\"stars\")))\n}\nlookup.reviews.by.user <- function(user_id, fields='{\"_id\":0}', db = mongo, ns = \"yelp.review\")\n{\n  query = sprintf('{\"user_id\":\"%s\"}',user_id)\n  tmp = mongo.find.all(db,ns,query = query, fields = fields)\n  return(tmp)\n}\nlookup.tips.by.business <- function(business_id,fields='{\"_id\":0,\"checkin_info\":1}',db = mongo, ns = \"yelp.checkin\")\n{\n  query = sprintf('{\"business_id\":\"%s\"}',business_id)\n  tmp = mongo.find.all(db,ns,query=query,fields=fields)\n  return(tmp)\n}\nlookup.reviews.by.business <- function(business_id,fields='{\"_id\":0}', db = mongo,ns = \"yelp.review\")\n{\n  query = sprintf('{\"business_id\":\"%s\"}',business_id)\n  tmp = mongo.find.all(db,ns,query = query, fields=fields)\n  return(tmp)\n}\n\nlookup.review.text <- function(review_id,db = mongo, ns = \"yelp.review\",fields='{\"_id\":0,\"text\":1}')\n{\n  query = sprintf('{\"review_id\":\"%s\"}',review_id)\n  tmp = mongo.find.one(db,ns,query = query, fields=fields)\n  return(mongo.bson.value(tmp,\"text\"))\n}\nlookup.review.notext <- function(review_id,db = mongo, ns = \"yelp.review\",fields='{\"_id\":0,\"text\":0}')\n{\n  query = sprintf('{\"review_id\":\"%s\"}',review_id)\n  tmp = mongo.find.one(db,ns,query = query, fields=fields)\n  return(mongo.bson.to.list(tmp))\n}\n",
    "created" : 1430182010333.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1508462021",
    "id" : "B5D867B1",
    "lastKnownWriteTime" : 1431138997,
    "path" : "~/yelp/lookupData.R",
    "project_path" : "lookupData.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}